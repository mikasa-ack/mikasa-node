[package]
name = "frontier-template-node"
version = "0.0.0"
license = "Unlicense"
build = "build.rs"
description = "A fresh FRAME-based Substrate node, ready for hacking."
publish = false
authors = { workspace = true }
edition = { workspace = true }
repository = { workspace = true }

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
async-trait = "0.1"
clap = { version = "4.1", features = ["derive", "deprecated"] }
futures = "0.3.25"
jsonrpsee = { workspace = true, features = ["server", "macros"] }
log = "0.4.17"
scale-codec = { package = "parity-scale-codec", workspace = true }
serde = { workspace = true }

# Substrate
prometheus-endpoint = { package = "substrate-prometheus-endpoint", workspace = true }
sc-basic-authorship = { workspace = true }
sc-cli = { workspace = true }
sc-client-api = { workspace = true }
sc-consensus = { workspace = true }
sc-consensus-aura = { workspace = true }
sc-consensus-manual-seal = { workspace = true }
sc-executor = { workspace = true }
sc-finality-grandpa = { workspace = true }
sc-network = { workspace = true }
sc-rpc = { workspace = true }
sc-rpc-api = { workspace = true }
sc-service = { workspace = true }
sc-telemetry = { workspace = true }
sc-transaction-pool = { workspace = true }
sc-transaction-pool-api = { workspace = true }
sp-api = { workspace = true, features = ["std"] }
sp-block-builder = { workspace = true }
sp-blockchain = { workspace = true }
sp-consensus-aura = { workspace = true, features = ["std"] }
sp-core = { workspace = true, features = ["std"] }
sp-finality-grandpa = { workspace = true, features = ["std"] }
sp-inherents = { workspace = true, features = ["std"] }
sp-keyring = { workspace = true }
sp-offchain = { workspace = true, features = ["std"] }
sp-runtime = { workspace = true, features = ["std"] }
sp-session = { workspace = true, features = ["std"] }
sp-state-machine = { workspace = true, features = ["std"] }
sp-timestamp = { workspace = true, features = ["std"] }
sp-transaction-pool = { workspace = true, features = ["std"] }
sp-trie = { workspace = true, features = ["std"] }
# These dependencies are used for RPC
frame-system-rpc-runtime-api = { workspace = true }
pallet-transaction-payment-rpc = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
substrate-frame-rpc-system = { workspace = true }
# These dependencies are used for runtime benchmarking
frame-benchmarking = { workspace = true, optional = true }
frame-benchmarking-cli = { workspace = true, optional = true }
frame-system = { workspace = true }
pallet-transaction-payment = { workspace = true }

# Frontier
fc-cli = { workspace = true }
fc-consensus = { workspace = true }
fc-db = { workspace = true }
fc-mapping-sync = { workspace = true }
fc-rpc = { workspace = true }
fc-rpc-core = { workspace = true }
fp-dynamic-fee = { workspace = true, features = ["std"] }
fp-evm = { workspace = true, features = ["std"] }
fp-rpc = { workspace = true, features = ["std"] }
fp-storage = { workspace = true, features = ["std"] }
frontier-template-runtime = { workspace = true, features = ["std"] }

[build-dependencies]
substrate-build-script-utils = { workspace = true }

[features]
default = ["with-rocksdb-weights"]
with-rocksdb-weights = ["frontier-template-runtime/with-rocksdb-weights"]
with-paritydb-weights = ["frontier-template-runtime/with-paritydb-weights"]
rpc-binary-search-estimate = ["fc-rpc/rpc-binary-search-estimate"]
runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-benchmarking-cli/runtime-benchmarks",
	"sc-service/runtime-benchmarks",
	"frontier-template-runtime/runtime-benchmarks",
]
